name: Polykey CI

on:
  push:
    branches:
      - main
      - CI
  pull_request:
    branches:
      - main
      - CI

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: polykey
        ports:
          - 5432:5432

    steps:
      # -----------------------------
      # Checkout code
      # -----------------------------
      - uses: actions/checkout@v4

      # -----------------------------
      # Setup Go environment
      # -----------------------------
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      # -----------------------------
      # Cache Go modules
      # -----------------------------
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.golangci-lint/cache
          key: ${{ runner.os }}-go-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # -----------------------------
      # Cache golangci-lint binary
      # -----------------------------
      - name: Cache golangci-lint
        uses: actions/cache@v3
        with:
          path: ~/.cache/golangci-lint
          key: golangci-lint-${{ runner.os }}-${{ hashFiles('**/*.go') }}

      # -----------------------------
      # Install golangci-lint
      # -----------------------------
      - name: Install golangci-lint
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v1.51.2/golangci-lint-1.51.2-linux-amd64.tar.gz | tar -xz -C /usr/local/bin

      # -----------------------------
      # Lint
      # -----------------------------
      - name: Lint
        run: make lint

      # -----------------------------
      # Build
      # -----------------------------
      - name: Build
        run: make build

      # -----------------------------
      # Integration Tests
      # -----------------------------
      - name: Run integration tests
        run: make test-integrations

      # -----------------------------
      # Security Checks
      # -----------------------------
      - name: Run vulnerability checks (Trivy + vulncheck)
        run: |
          # Install Trivy if not present
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -
          fi
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .
          vulncheck --exit-code 1
