name: Polykey CI

on:
  push:
    branches:
      - main
      - CI
  pull_request:
    branches:
      - main
      - CI

jobs:
  # ==============================
  # Lint Job
  # ==============================
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache golangci-lint
        uses: actions/cache@v3
        with:
          path: ~/.cache/golangci-lint
          key: golangci-lint-${{ runner.os }}-${{ hashFiles('**/*.go') }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v1.51.2/golangci-lint-1.51.2-linux-amd64.tar.gz | tar -xz
          sudo mv golangci-lint-1.51.2-linux-amd64/golangci-lint /usr/local/bin/
          rm -rf golangci-lint-1.51.2-linux-amd64

      - name: Run Linter
        run: |
          echo "::group::Running Linter"
          make lint
          echo "::endgroup::"

  # ==============================
  # Build Job
  # ==============================
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Binaries
        run: |
          echo "::group::Building Polykey"
          make build
          echo "::endgroup::"

  # ==============================
  # Integration Tests Job
  # ==============================
  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: polykey
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      # Leaving here incase needed.
      # - name: Setup AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: <your-region>

      - name: Run Integration Tests
        run: |
          echo "::group::Running Integration Tests"
          make test-integrations
          echo "::endgroup::"

  # ==============================
  # Security Checks Job
  # ==============================
  security-checks:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -
          fi

      - name: Run Security Checks
        run: |
          echo "::group::Running Security Checks"
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .
          vulncheck --exit-code 1
          echo "::endgroup::"
