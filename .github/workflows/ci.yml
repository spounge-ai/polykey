name: PolyKey CI

on:
  push:
    branches: ["ci" ]
  pull_request:
    branches: ["ci" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true
      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/golangci-lint
          key: golangci-lint-${{ runner.os }}-v1.61.0
      - name: Install golangci-lint
        run: |
          if [ ! -f ~/.local/bin/golangci-lint ]; then
            mkdir -p ~/.local/bin
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ~/.local/bin v2.2.2
          fi
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Run golangci-lint
        run: golangci-lint run

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build tester image and populate cache
        id: build-tester
        uses: docker/build-push-action@v6
        with:
          context: .
          target: tester
          load: true
          tags: polykey-tester:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Unit Tests
        run: docker run --rm polykey-tester:ci-${{ github.sha }} make test

  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Install test dependencies
        run: go install github.com/mfridman/tparse@latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build server image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: server
          load: true
          tags: polykey-server:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start server container
        run: |
          docker run -d \
            --name polykey-server \
            --health-cmd="/bin/grpc_health_probe -addr=:50051" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=5 \
            --health-start-period=20s \
            -p 50051:50051 \
            -e POLYKEY_ENV=docker \
            -e POLYKEY_LOG_LEVEL=info \
            polykey-server:ci-${{ github.sha }}

      - name: Wait for server to be healthy
        run: |
          echo "Waiting for server to become healthy..."
          timeout 60s bash -c 'while [ "$(docker inspect --format="{{.State.Health.Status}}" polykey-server)" != "healthy" ]; do sleep 2; done'
          echo "Server is healthy!"

      - name: Run integration tests
        run: |
          POLYKEY_SERVER_ADDR=localhost:50051 go test -v -json -tags=integration ./... | tparse
        env:
          CGO_ENABLED: 0

      - name: Show server logs on failure
        if: failure()
        run: docker logs polykey-server

      - name: Cleanup
        if: always()
        run: docker rm -f polykey-server || true

  build-and-push:
    name: Build and Push Production Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64  # TODO: Add linux/arm64 back later
          # platforms: linux/amd64,linux/arm64
          build-args: |
            COMPRESS_BINARIES=true
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=gha,mode=max

  scan:
      name: Scan Production Image
      runs-on: ubuntu-latest
      needs: build-and-push
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      timeout-minutes: 10
      permissions:
        contents: read
        packages: read
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Log in to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Extract first image tag
          id: image
          run: |
            FIRST_TAG=$(echo "${{ needs.build-and-push.outputs.image }}" | head -n1 | xargs)
            if [ -z "$FIRST_TAG" ]; then
              echo "Error: No image tag found"
              exit 1
            fi
            echo "tag=$FIRST_TAG" >> $GITHUB_OUTPUT
            echo "Using image: $FIRST_TAG"

        - name: Scan image for vulnerabilities
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: '${{ steps.image.outputs.tag }}'  
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'

        - name: Generate SBOM
          uses: anchore/sbom-action@v0
          with:
            image: '${{ steps.image.outputs.tag }}'   
            format: spdx-json
            output-file: sbom.spdx.json